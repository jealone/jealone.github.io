<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jealone]]></title>
  <link href="http://jealone.github.io/atom.xml" rel="self"/>
  <link href="http://jealone.github.io/"/>
  <updated>2014-07-09T10:45:22+08:00</updated>
  <id>http://jealone.github.io/</id>
  <author>
    <name><![CDATA[Arthur Guo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP 关于 Call_user_func_array() 函数]]></title>
    <link href="http://jealone.github.io/blog/2014/07/08/php-guan-yu-call-user-func-array-han-shu/"/>
    <updated>2014-07-08T18:43:21+08:00</updated>
    <id>http://jealone.github.io/blog/2014/07/08/php-guan-yu-call-user-func-array-han-shu</id>
    <content type="html"><![CDATA[<h2>今天踩的一个PHP的坑</h2>

<p>其实也怪自己没有仔细阅读文档，话说最近在公司迁一个后台管理系统到另外一个后台，原始的后台代码写的及其混乱，貌似是很多人合写最后堆在一起的，乱到什么程度呢，就是说某一项功能或许有多种实现，而且后台会产生很多脏数据，没有回滚机制，最开始接手的时候，本着精益求精的追求，每一个功能实现不好的地方，我会自己重新设计实现，但是越到后来发现越坑，连带前端代码都要我重写，后来自己的想法是赶紧写完交差，再也不要碰这系统了！
经过1个多周的奋战，就快完结的时候遇到了<a href="http://www.php.net/manual/zh/function.call-user-func-array.php" title="PHP手册"><code>call_user_func_array()</code></a>这个函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">mixed</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$callback</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$param_arr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>参数</p>

<ul>
<li><p>callback 被调用的回调函数。</p></li>
<li><p>param_arr 要被传入回调函数的数组，这个数组得是索引数组。</p></li>
</ul>


<p>返回值</p>

<ul>
<li>返回回调函数的结果。如果出错的话就返回FALSE</li>
</ul>


<p>注释</p>

<ul>
<li>PHP 5.4之前，如果param_arr里面的参数是引用传值，那么不管原函数默认的各个参数是不是引用传值，都会以引用方式传入到回调函数。虽然以引用传值这种方式来传递参数给回调函数，不会发出不支持的警告，但是不管怎么说，这样做还是不被支持的。并且在PHP 5.4里面被去掉了。而且，这也不适用于内部函数。如果回调函数默认设置需要接受的参数是引用传递的时候，按值传递，结果将会输出一个警告。</li>
</ul>


<p>函数用法</p>

<figure class='code'><figcaption><span>call_user_func_array() 函数用法实例</span><a href='http://www.php.net/manual/zh/function.call-user-func-array.php#49232'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">//If you need to call just function with parameters:</span>
</span><span class='line'><span class="nb">call_user_func_array</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">,</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If you need to call CLASS method (NOT object, 静态方法):</span>
</span><span class='line'><span class="nb">call_user_func_array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;Foo&#39;</span><span class="p">),</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If you need to call OBJECT method:</span>
</span><span class='line'><span class="nb">call_user_func_array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$Object</span><span class="p">,</span> <span class="s1">&#39;Foo&#39;</span><span class="p">),</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If you need to call method of object of object:</span>
</span><span class='line'><span class="nb">call_user_func_array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$Object</span><span class="o">-&gt;</span><span class="na">Object</span><span class="p">,</span> <span class="s1">&#39;Foo&#39;</span><span class="p">),</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If you need to call object method from within the very same object (NOT CLASS!):</span>
</span><span class='line'><span class="nb">call_user_func_array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;Foo&#39;</span><span class="p">),</span><span class="nx">args</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实上面的应用都没有问题，但是注释里面的内容值得仔细研读，就是关于参数传值的问题。PHP默认是按值传递，但是我们也可以通过<code>&amp;</code>让参数传递引用，如果我们的回调函数要接受的参数是引用怎么办？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">call_user_func_array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$method</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$arg1</span><span class="p">,</span> <span class="nv">$arg2</span><span class="p">,</span> <span class="nv">$arg3</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样才能正确传递参数，函数才能正常调用。</p>

<ul>
<li><em>当然，例子中的对象不用加<code>&amp;</code>，因为PHP中对象默认是按引用传递</em></li>
</ul>


<p>举个简单的例子就是：</p>

<figure class='code'><figcaption><span>Person.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="nx">_instance</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="nx">__construction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//通过静态方法获取实例</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_instance</span> <span class="o">=</span> <span class="nx">Behaviour</span><span class="o">::</span><span class="na">getInstance</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="nx">__call</span><span class="p">(</span><span class="nv">$func</span><span class="p">,</span> <span class="nv">$args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_instance</span><span class="p">,</span> <span class="nv">$func</span><span class="p">),</span> <span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用这个设计主实现匿名函数，可以隐藏方法类的细节,我们通过Person对象来调用Data类中的方法时，就好像调用Person自己的方法。利用这个设计就可以实现类似Scala中的特质(好比带属性和具体方法的接口),对一个类可以任意扩展，比如这个Person类我们可以建立很多人的动作类，只有通过Person才能调用动作方法，因为动作方法是私有类(构造函数私有)。还可以通过<code>__call()</code>函数中读取配置，根据函数名取得不同实例，实现对类的扩展，很像<em>C++</em>中的多重继承，不过得自己控制扩展的过程。</p>

<p>好了，讲到今天遇到情况，就是例子中的设计，通过<code>__call($func, $args)</code>,取得的<code>$args</code>，然后通过<code>call_user_func_array()</code>函数，将<code>$args</code>传递给回调函数，然而，我的回调函数的参数有一个默认是按引用传递，但我却把值直接传了过去，结果直接导致回调函数一直没法调用。</p>

<p>虽然是很简单的原理，在<a href="http://www.php.net/manual/zh/function.call-user-func-array.php" title="PHP手册"><em>PHP手册</em></a>中也写了出来，但是却是特别容易忽略的地方。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇博文]]></title>
    <link href="http://jealone.github.io/blog/2014/06/23/my-first-blog/"/>
    <updated>2014-06-23T19:02:45+08:00</updated>
    <id>http://jealone.github.io/blog/2014/06/23/my-first-blog</id>
    <content type="html"><![CDATA[<h2>为什么开始写博客</h2>

<p>之前看过<a href="http://en.wikipedia.org/wiki/Steve_Yegge" title="维基百科"><em>Steve Yegge</em></a>的博客，总觉得自己荒废这么多年的写作什么时候也应该重新拾掇起来，毕竟学习这么多年为的不仅仅仅仅是那800字的东西。</p>

<p>机缘是有一天看到某位学长的<a href="http://zh.lucida.me/blog/on-learning-algorithms/" title="算法学习之路"><em>算法学习之路</em></a>的博文,在大呼相见恨晚后，我还额外知道了<a href="http://octopress.org" title="Octopress"><em>Octopress</em></a>以及<a href="https://github.com" title="github"><em>github</em></a>能托管静态页面，自己捣鼓了一个下午，终于才有了我自己的博客</p>

<h2>幸运的2014年</h2>

<p>其实我一直觉得今年是我的幸运年，各种侥幸突围，终于，生活还是走上了自己一直期望的方向，怀着感恩的心感谢陪伴我的人，感谢那些相信我的人！现在的我要重新起航，做一个Too Young Too Naive的Geek！</p>

<h2>准备写什么</h2>

<ul>
<li>Think of Tech</li>
<li>Taste of Books</li>
<li>About Work and Life etc.</li>
</ul>

]]></content>
  </entry>
  
</feed>
